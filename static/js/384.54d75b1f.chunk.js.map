{"version":3,"file":"static/js/384.54d75b1f.chunk.js","mappings":"sRAEMA,EAAU,mCACVC,EAAU,+BAEVC,EAAU,SAAAC,GACd,OAAOC,EAAAA,EAAAA,IACAD,GACJE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,IAAR,IACRC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,EAEYG,EAAY,SAAAC,GACvB,IAAMV,EAAO,UAAMF,EAAN,iCAAsCD,EAAtC,kBAAuDa,GAEpE,OAAOX,EAAQC,EAChB,EAEYW,EAAe,SAAAC,GAC1B,IAAMZ,EAAO,UAAMF,EAAN,kBAAuBc,EAAvB,oBAAqCf,GAElD,OAAOE,EAAQC,EAChB,EAEYa,EAAkB,WAC7B,IAAMb,EAAO,UAAMF,EAAN,qCAA0CD,GAEvD,OAAOE,EAAQC,EAChB,EAEYc,EAAa,SAAAF,GACxB,IAAMZ,EAAO,UAAMF,EAAN,kBAAuBc,EAAvB,4BAA6Cf,GAE1D,OAAOE,EAAQC,EAChB,EAEYe,EAAa,SAACH,GAAmB,IAAfI,EAAc,uDAAN,EAC/BhB,EAAO,UAAMF,EAAN,kBAAuBc,EAAvB,4BAA6Cf,EAA7C,gCAA4EmB,GAEzF,OAAOjB,EAAQC,EAChB,C,oJCtCYiB,EAAOC,EAAAA,GAAAA,KAAH,+CAIJC,EAAkBD,EAAAA,GAAAA,MAAH,gNAYfE,EAAeF,EAAAA,GAAAA,OAAH,8Y,SCdZD,EAAO,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACrB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAQA,OACE,UAAC,EAAD,CAAQH,SAPW,SAAAI,GAGnB,OAFAA,EAAEC,iBAEKL,EAASE,EACjB,EAGC,WACE,SAAC,EAAD,CACEI,KAAK,OACLC,aAAa,MACbC,YAAY,gBACZN,MAAOA,EACPO,SAAU,SAAAL,GAAC,OAAID,EAASC,EAAEM,OAAOR,MAAtB,KAEb,SAAC,EAAD,CAAgBI,KAAK,SAArB,sBAGL,EAEDV,EAAKe,iBAAmB,CACtBX,SAAU,WAAQ,GC1Bb,IAAMY,EAAYf,EAAAA,GAAAA,KAAH,kFCKhBgB,GAAYC,EAAAA,EAAAA,OAAK,kBACrB,4BADqB,IAqCvB,EAjCe,WACb,OAA4Bb,EAAAA,EAAAA,UAAS,IAArC,eAAOc,EAAP,KAAeC,EAAf,KACA,GAA0Bf,EAAAA,EAAAA,UAAS,IAAnC,eAAOZ,EAAP,KAAc4B,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,UAErCC,EAAAA,EAAAA,YAAU,YACHlC,GAAUgC,KAEfjC,EAAAA,EAAAA,IAAUC,GAASgC,GAAaxC,MAAK,SAAAE,GAAI,OAAIiC,EAAUjC,EAAKyC,QAAnB,GAC1C,GAAE,CAACnC,EAAOgC,IAaX,OACE,UAAC,EAAD,YACE,SAACzB,EAAD,CAAMI,SAbY,SAAAE,GACpBe,EAASf,GACTkB,EAAgB,CAAE/B,MAAOa,IAEpBA,IACHiB,EAAaM,OAAO,SACpBL,EAAgBD,GAChBH,EAAU,IAEb,KAKG,SAAC,EAAAU,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAACf,EAAD,CAAWgB,KAAMd,QAIxB,C","sources":["components/MoviesApp/api/API.js","components/MoviesApp/components/Form/styles.js","components/MoviesApp/components/Form/index.jsx","components/MoviesApp/pages/Movies/styles.js","components/MoviesApp/pages/Movies/index.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '29cf81a599ffabad205843cb29ab1462';\nconst API_URL = 'https://api.themoviedb.org/3';\n\nconst getData = request => {\n  return axios\n    .get(request)\n    .then(res => res.data)\n    .catch(error => console.log(error));\n};\n\nexport const getMovies = query => {\n  const request = `${API_URL}/search/movie?api_key=${API_KEY}&query=${query}`;\n\n  return getData(request);\n};\n\nexport const getMovieById = id => {\n  const request = `${API_URL}/movie/${id}?api_key=${API_KEY}`;\n\n  return getData(request);\n};\n\nexport const getTrendsMovies = () => {\n  const request = `${API_URL}/trending/all/day?api_key=${API_KEY}`;\n\n  return getData(request);\n};\n\nexport const getCredits = id => {\n  const request = `${API_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n\n  return getData(request);\n};\n\nexport const getReviews = (id, count = 1) => {\n  const request = `${API_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=${count}`;\n\n  return getData(request);\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  position: relative;\n`;\n\nexport const SearchFormInput = styled.input`\n  font-size: 16px;\n  box-sizing: border-box;\n  width: 100%;\n  height: 46px;\n  line-height: 46px;\n  padding: 10px 20px;\n  border-radius: 30px;\n  border: none;\n  outline: none;\n`;\n\nexport const SearchButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: -1px;\n  font-size: 16px;\n  height: 46px;\n  padding: 10px 26px;\n  background: linear-gradient(\n    to right,\n    rgba(0, 231, 57, 1) 0%,\n    rgba(0, 20, 221, 1) 100%\n  );\n  color: inherit;\n  border: 0;\n  border-radius: 30px;\n  outline: 0;\n  transition: 0.3s;\n  cursor: pointer;\n\n  &:hover {\n    color: black;\n  }\n`;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport * as S from './styles';\n\nexport const Form = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    return onSubmit(value);\n  };\n\n  return (\n    <S.Form onSubmit={handleSubmit}>\n      <S.SearchFormInput\n        type=\"text\"\n        autoComplete=\"off\"\n        placeholder=\"Search movies\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n      <S.SearchButton type=\"submit\">Search</S.SearchButton>\n    </S.Form>\n  );\n};\n\nForm.defaultProptypes = {\n  onSubmit: () => {},\n};\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  max-width: 80%;\n  margin: 0 auto;\n  padding: 30px 0;\n`;\n","import React, { lazy, Suspense, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovies } from '../../api/API';\nimport { Loader } from 'components/ImageGallery/Loader';\nimport { Form } from 'components/MoviesApp/components/Form';\nimport * as S from './styles';\n\nconst MovieList = lazy(() =>\n  import('components/MoviesApp/components/MovieList/MovieList')\n);\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchValue = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query && !searchValue) return;\n\n    getMovies(query || searchValue).then(data => setMovies(data.results));\n  }, [query, searchValue]);\n\n  const setQueryParam = value => {\n    setQuery(value);\n    setSearchParams({ query: value });\n\n    if (!value) {\n      searchParams.delete('query');\n      setSearchParams(searchParams);\n      setMovies([]);\n    }\n  };\n\n  return (\n    <S.Container>\n      <Form onSubmit={setQueryParam} />\n      <Suspense fallback={<Loader />}>\n        <MovieList list={movies} />\n      </Suspense>\n    </S.Container>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","API_URL","getData","request","axios","then","res","data","catch","error","console","log","getMovies","query","getMovieById","id","getTrendsMovies","getCredits","getReviews","count","Form","styled","SearchFormInput","SearchButton","onSubmit","useState","value","setValue","e","preventDefault","type","autoComplete","placeholder","onChange","target","defaultProptypes","Container","MovieList","lazy","movies","setMovies","setQuery","useSearchParams","searchParams","setSearchParams","searchValue","get","useEffect","results","delete","Suspense","fallback","Loader","list"],"sourceRoot":""}